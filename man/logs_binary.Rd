% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/log_score.R
\name{logs_binary}
\alias{logs_binary}
\title{Log Score for Binary outcomes}
\usage{
logs_binary(true_values, predictions)
}
\arguments{
\item{true_values}{A factor of length n with exactly two levels, holding
the observed values.
The highest factor level is assumed to be the reference level. This means
that \code{predictions} represents the probability that the observed value is
equal to the highest factor level.}

\item{predictions}{A numeric vector of length n, holding probabilities.
Values represent the probability that the corresponding outcome is equal to
the highest level of the factor \code{true_value}.}
}
\value{
A numeric vector with log scores
}
\description{
Computes the Log Score for probabilistic forecasts of binary outcomes.
}
\details{
The Log Score is a proper score rule suited to assessing the accuracy of
probabilistic binary predictions. The outcomes can be either 0 or 1,
the predictions must be a probability that the true outcome will be 1.

The Log Score is then computed as the negative logarithm of the probability
assigned to the true outcome. Reporting the negative logarithm means that
smaller values are better.

The function requires users to provide observed values as a factor in order
to distinguish its input from the input format required for scoring point
forecasts. Internally, however, factors will be converted to numeric values.
A factor \verb{true_value = factor(c(0, 1, 1, 0, 1)} with two levels (\code{0} and \code{1})
would internally be coerced to a numeric vector (in this case this would
result in the numeric vector c(1, 2, 2, 1, 1)). After subtracting 1, the
resulting vector (\code{c(0, 1, 1, 0)} in this case) is used for internal
calculations. All predictions are assumed represent the probability that the
outcome is equal of the highest factor level (in this case that the
outcome is equal to 1).
You could alternatively also provide a vector like
\code{true_value = c("a", "b", "b", "a")} (with two levels, \code{a} and \code{b}),
which would result in exactly the same internal representation. Probabilities
then represent the probability that the outcome is equal to "b".
}
\examples{
true_values <- factor(sample(c(0, 1), size = 30, replace = TRUE))
predictions <- runif(n = 30, min = 0, max = 1)
logs_binary(true_values, predictions)
}
\keyword{metric}
